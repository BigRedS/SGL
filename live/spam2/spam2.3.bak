#! /usr/bin/perl

use File::Copy;

#use warnings;
#use diagnostics;
#use strict;

## Get timestamp when we begin:
$begin = time();

my $location=$ARGV[0];
#my $location="london";

my $today_cmd = "date +%y%m%d";
my $today=qx/$today_cmd/;
chomp $today;

 #########################################################################################
## ALL directory paths _MUST_ feature a trailing slash since paths are just concatenated ##
 ########################################################################################

	my $whitelist_path = "/home/avi/bin/spam2/whitelist";

	my $in_dir = "/mnt/".$location."/in/";
	my $bad_dir = "/var/badmail/".$location."/".$today."/";
	my $good_dir = "/var/goodmail/".$location."/".$today."/";


#	my $in_dir = "/var/badmail/london/080423/";
#	my $bad_dir = "/var/badmail/london/080423/bad/";
#	my $good_dir = "/var/badmail/london/080423/good/";

#	my $in_dir = "/home/avi/bin/spam2/test/";
#	my $bad_dir = $in_dir;
#	my $good_dir = $in_dir;


## Mail-related settings:
	my $problem_address = 'avi.greenbury@servicegraphics.co.uk';
	my $sendmail = "/usr/sbin/sendmail -t";
	my $reply_to = 'avi.greenbury@servicegraphics.co.uk';
	my $header = "Following is an email plucked from the spam filter\n\n\t\tBEGIN FORWARDED MESSAGE:\n\n";
	my $signature = "\n\n\t\tEND FORWARDED MESSAGE\nAny problems, let ".$problem_address." know";
	my $from_name = "spambot";

	my $reporting_to_addresses = 'avi.greenbury@servicegraphics.co.uk';
	my $reporting_from_name = "spambot";
	
## Count zero-ing:
	my $all_count = 0;
	my $bad_count = 0;
	my $good_count = 0;
	my @good_list=();
	my $winner = "0";
	my $cc_address = "";
## BEGIN THINKING! ##


## Check we have everything:

	# Check for, and create if neccesary, today's directories:
	## If they already exist, but are not writeable, we will not be able to create them, so will fail.
	unless ( (-d $bad_dir) && (-w $bad_dir)){
		mkdir $bad_dir || die ("Error creating Bad directory at $bad_dir");
	}
	unless ( (-d $good_dir) && (-w $bad_dir)){
		mkdir $good_dir || die ("Error creating Good directory at $good_dir");
	}	

## Read Whitelist
# Whitelist is read into @whitelist_file, then the first column of each line (i.e. the actual
# whitelist items) are read into @whitelist

	open (WHITELIST, $whitelist_path) || die ("Error opening Whitelist at $whitelist_path");
		my @whitelist_file = <WHITELIST>;
	close (WHITELIST);
	my @whitelist=();
	foreach (@whitelist_file){
		unless ($_ =~ m/^#/){
			@white = split /%/, $_;
			if ($white[0] =~ / /){
				@white_again = split (/ /, $white[0]);
				$white[0] = $white_again[0];
			}
			push (@whitelist, $white[0]);
		}
	}

	## Calculate the size of the whitelist, and put together the beginning of a command:
	my $whitelist_size = @whitelist;

	if ($whitelist_size == 1){
		$cmd = "grep -i \"".$whitelist[0]."\"";
		print "Whoop";
	}else{
		$cmd = "grep -i \"";
		foreach (@whitelist){
			$count++;
			$cmd.=$_;
			if ($count < $whitelist_size){
				$cmd.="\\|";
			}
		}
		$cmd.="\" ";
	}
	$count = 0;

## read in dir
	opendir (IN, $in_dir) || die ("Error opening In directory at $in_dir");
		my @emails = readdir(IN);
	closedir(IN);

# Create second whitelist, for use in rescanning 'good' mail:
#print "creating whitelist two\n";
	my @whitelist_two=();
 	foreach (@whitelist_file){
		unless ($_ =~ m/^#/){
			@line = split(/%/, $_);
			if ($line[0] =~ m/ /){
				@line_array = split(/ /, $line[0]);
				#print $line_array[1],"\n";
				push (@whitelist_two, $line_array[1]);
			}else{
				push (@whitelist_two, $line[0]);
				#print $line[0], "\n";
			}
		}
	}

foreach (@whitelist_two){
	print $_, "\n";
}

## Start Processing Files:
# Each file is grepped for *any* of the whitelist. If there is no match it is treated as 'bad'. 
# If there is a match, it is then regrepped to find *which* whitelist item matched. The details
# for that whitelist item are then extracted from the whitelist, and the email is sent.
#
# By this point in the program, the only I/O should be on the emails themselves. Everything else 
# (whitelist, directory listings, commands) should be in memory.

	foreach (@emails) {
		$all_count++;
		$email = $_;
		$email_path = $in_dir.$email;

	#	print "Checking ".$_."...\t";

		if ($email =~ m/EML$/){		#Only bother processing if it ends with EML
			$email_path = $in_dir.$email;
			$cmd2=$cmd.$email_path;
			$cmd2.=" | wc -l";
#			print $cmd2;
			
			if ($whitelist_size < 2){	# If there's only one line in the whitelist,
				print "1\n";		# we don't need to build the command.
			}else{
				$match_count = qx/$cmd2/;
#
## Initial Checking's been done. Herein we process the email according to what the checking found
#
				if ( $match_count > 0){
					$good_count++;
					push (@good_list, $_);
					$winner = "0";

					# Open the email and see if it contains the words we're looking for.
					# If it does, the first match is called $winner.
					open (GOODMAIL, $email_path) || die ("Error opening $email_path for second scan");
						print $email_path;
						while ($line = <GOODMAIL>){
							$count = 0;
							foreach (@whitelist_two){
								if ($line =~ /$_/i){
									$winner = $_;
									$details=$whitelist_file[$count];
								}
								$count++;
							}
						}
					close (GOODMAIL);
					
					
					@detail_array=split(/%/, $details);
					$subject = $detail_array[1];
					$to_address = $detail_array[2];
					$cc_address = $detail_array[3];

					open (EMAIL, $email_path);
						@full_email = <EMAIL>;
					close (EMAIL);

						$email_size=@full_email;
					$dividing_line = 0;
					for ($i=0, $i<$email_size, $i++){
						if ($full_email[$i] =~ m/^X-Original/){
							$dividing_line=$i;
							last;
						}else{
							$dividing_line=0;
						}
					}
					#$mail_split = $dividing_line + 1;
#					print "Sendmail 1\n";
					open (MAIL, "|$sendmail") || die "Couldn't open pipe to $sendmail";
						print MAIL "From: ", $from_name,"\n";
						print MAIL "Subject: ", $subject,"\n";
						print MAIL "To: ", $to_address, "\n";
						$print = 0;
						foreach (@full_email){
							if ($print == 1){
								print MAIL $_;
							}
							if ($_ =~ /X-Original/){
								$print = 1;
							}
						}
						print MAIL $signature;
						print "\n\nmail id: $email\n";
					close (MAIL);
				move($email_path, $good_dir.$winner.".".$email);
			}else{
				open (BADMAIL, $email_path);
					while ($line = <BADMAIL>){
						if ($line =~ m/Subject:/i){
							$subject_line = $line;
						}
					}

					$subject_line =~ s/subject://i;	#strip leading subject
					$subject_line =~ s/^\s+//g;	#strip leading whitespace
					$subject_line =~ s/\s$//g;	#strip trailing whitespace
					$subject_line =~ s/\s/_/gi;	#Sub every whitespace for an underscore
					chomp $subject_line;
				close (BADMAIL);
				move ($email_path, $bad_dir.$subject_line.".EML");
			}
		}
	}
}



	open (REPORTMAIL, "|$sendmail");
		print REPORTMAIL "To: ".$reporting_to_addresses."\n";
		print REPORTMAIL "From: ".$reporting_from_name."\n";
		print REPORTMAIL "Subject: ".$location." spambot\n";
		print REPORTMAIL "This is the spambot checking ".$location."\nIn:  \t".$all_count."\t\t".$in_dir."\nGood:\t".$good_count."\t\t".$good_dir."\nBad: \t".$bad_count."\t\t".$bad_dir."\nTime:\t".$difference."s\n\n".$percent_good."% Good mail\n".$mail_per_second." messages per second\n\n";
		if ($good_count > 0){
			print  REPORTMAIL  "Good emails:\n";
			foreach (@good_list){
				print  REPORTMAIL  "\t".$_."\n";
			}
		}
		print REPORTMAIL "\n";
	close (REPORTMAIL);

	print "\n";




